// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String              @unique
  password           String
  profile_photo      String?
  is_email_verified  Boolean             @default(false)
  joinedAt           DateTime            @default(now())
  dob                DateTime
  studentProfile     Student?
  teacherProfile     Teacher?
  otp                OTP?
  PasswordResetToken PasswordResetToken?
}

model Student {
  id                          String           @id @default(auto()) @map("_id") @db.ObjectId
  user                        User             @relation(fields: [userId], references: [id])
  userId                      String           @unique @db.ObjectId
  username                    String           @unique
  programme                   String
  gems                        Int              @default(50)
  rank                        Difficulty       @default(Easy)
  xpPoints                    Int              @default(0)
  quizCompletedCount          Int              @default(0)
  codeChallengeCompletedCount Int              @default(0)
  lessonCompletedCount        Int              @default(0)
  enrolledCourses             Course[]         @relation(fields: [enrolledCoursesId], references: [id])
  enrolledCoursesId           String[]         @db.ObjectId
  unlockedBadges              Badge[]          @relation(fields: [badgeId], references: [id])
  badgeId                     String[]         @db.ObjectId
  badgeProgress               BadgeProgress[]
  rankProgress                RankProgress?   
  courseProgress              CourseProgress[]
  streaks                     Streaks?
  levelProgress               LevelProgress[]
  solutions                   Solution[]
}

model Teacher {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  user                 User     @relation(fields: [userId], references: [id])
  userId               String   @unique @db.ObjectId
  isVerified           Boolean
  certificate          String
  createdCourses       Course[] @relation("CreatedBy")
  contributedCourses   Course[] @relation(fields: [contributedCoursesId], references: [id])
  contributedCoursesId String[] @db.ObjectId
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
}

model OTP {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
}

model Course {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  description        String
  image_url          String?
  creator            Teacher          @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId          String           @unique @db.ObjectId
  contributorIds     String[]         @db.ObjectId
  contributors       Teacher[]        @relation(fields: [contributorIds], references: [id])
  enrolledStudents   Student[]        @relation(fields: [enrolledStudentsId], references: [id])
  enrolledStudentsId String[]         @db.ObjectId
  Topic              Topic[]
  CourseProgress     CourseProgress[]
  language           String
  Solution           Solution[]
}

model Topic {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  course         Course           @relation(fields: [courseId], references: [id])
  courseId       String           @db.ObjectId
  name           String
  description    String
  Level          Level[]
  order          Int
  CourseProgress CourseProgress[]
}

model Level {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  topic          Topic            @relation(fields: [topicId], references: [id])
  topicId        String           @db.ObjectId
  gems           Int
  xp             Int
  mysteryLevel   Boolean
  name           String
  order          Int
  difficulty     Difficulty       @default(Easy)
  Lesson         Lesson?
  codeChallenge  CodeChallenge?
  QuizChallenge  QuizChallenge[]
  levelType      LevelType        @default(Lesson)
  CourseProgress CourseProgress[]
  LevelProgress  LevelProgress[]
}

enum Difficulty {
  Easy
  Medium
  Hard
  Advanced
  Expert
}

enum LevelType {
  Lesson
  Quiz
  Code
}

// for MATCHING_PAIRS the client will parse the answer and split into pairs
// it will randomize the pairs and show a question that the user will have to find the best match
// sample answer 
// Imperative=C;Object Oriented Programming=C++;Functional Programming=Haskell; [answer]

// for COMPLETE_SEQUENCE
// sample question
// "$1("Hello world")" [Question]
// "print("Hello world")" [answer]
// ["output", "cout", "print"] [options]
// $[number] specifies the missing piece in the question
// the student job is to complete the sequence by choosing the right option
model QuizChallenge {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  level    Level    @relation(fields: [levelId], references: [id])
  levelId  String   @db.ObjectId
  question String?
  answer   String
  options  String[]
  quizType QuizType @default(MULTIPLE_CHOICE)
}

enum QuizType {
  MULTIPLE_CHOICE
  COMPLETE_SEQUENCE
  MATCHING_PAIRS
}

model Lesson {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  content String[]
  level   Level    @relation(fields: [levelId], references: [id])
  levelId String   @unique @db.ObjectId
}

model CodeChallenge {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  level         Level?        @relation(fields: [levelId], references: [id])
  levelId       String        @unique @db.ObjectId
  starterFile   String
  starterCode   String
  language      String
  testCases     TestCase[]
  solution      Solution[]
  challengeType ChallengeType @default(ALGORITHM)
}

enum ChallengeType {
  FIX_THE_BUG
  ALGORITHM
  COMPLETE_CODE
}

model TestCase {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  codeChallenge   CodeChallenge @relation(fields: [codeChallengeId], references: [id])
  codeChallengeId String        @db.ObjectId
  input           String
  expectedOutput  String
  description     String
}

// to advance rank follows this format
// Easy - Medium (complete 10 easy levels or 5 medium levels)
// Medium - Hard (complete 20 medium levels or 30 easy levels)
// Hard - Advanced (complete 5 hard levels or 30 medium)
// Advanced - Expert (10 hard levels or 5 advanced levels)
// this stores the rank progress  for a particular student (general user progress)
model RankProgress {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  studentId     String  @unique @db.ObjectId
  EasyCount     Int
  MediumCount   Int
  HardCount     Int
  AdvancedCount Int
  ExpertCount   Int
  Student       Student @relation(fields:[studentId], references: [id]) 
}

// complete quests to unlock badges
// 4 badges for m.v.p
// Quiz Master (complete at least 10 quizzes) * (the number of 10's)
// Code Ninja (complete at least 10 code challenges) * (the number of 10's)
// Active Learner (complete at least 10 lessons) * (the number of 10's)
// Xp Champ (gain at least 500xp) * (the number of 500's)
model Badge {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  name              String          @unique
  image             String
  description       String
  studentsWithBadge Student[]       @relation(fields: [studentId], references: [id])
  studentId         String[]        @db.ObjectId
  achievementCount  Int             @default(10)
  studentProgress   BadgeProgress[]
  badgeType         BadgeType       @default(Xp)
}

enum BadgeType {
  Quiz
  Code
  Learner
  Xp
}

model BadgeProgress {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  student         Student  @relation(fields: [studentId], references: [id])
  studentId       String   @db.ObjectId
  achieved        Boolean  @default(false)
  achievementDate DateTime
  Badge           Badge    @relation(fields: [badgeId], references: [id])
  badgeId         String   @db.ObjectId
  xTimes          Int      @default(0)
}

model CourseProgress {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  currentTopic Topic   @relation(fields: [topicId], references: [id])
  topicId      String  @db.ObjectId
  currentLevel Level   @relation(fields: [levelId], references: [id])
  levelId      String  @db.ObjectId
  student      Student @relation(fields: [studentId], references: [id])
  studentId    String  @db.ObjectId
  course       Course  @relation(fields: [courseId], references: [id])
  courseId     String  @db.ObjectId
  isCompleted  Boolean
}

model LevelProgress {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  student             Student @relation(fields: [studentId], references: [id])
  studentId           String  @db.ObjectId
  levelId             String  @db.ObjectId
  level               Level   @relation(fields: [levelId], references: [id])
  currentQuizNumber   Int
  currentLessonNumber Int
  completedLevel      Boolean
}

// streaks format
// once we encounter 
// history: 
// 1 - completed a lesson
// 0 - failed to complete a lesson
// 2 - used streak freeze
model Streaks {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  currentDate   DateTime
  createdDate   DateTime @default(now())
  currentCount  Int
  currentStatus Int
  history       Int[]
  student       Student  @relation(fields: [studentId], references: [id])
  studentId     String   @unique @db.ObjectId
}

model Solution {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  answer          String
  course          Course        @relation(fields: [courseId], references: [id])
  courseId        String        @db.ObjectId
  codeChallenge   CodeChallenge @relation(fields: [codeChallengeId], references: [id])
  codeChallengeId String        @db.ObjectId
  owner           Student       @relation(fields: [studentId], references: [id])
  studentId       String        @unique @db.ObjectId
}
